/**
 * Created by rajasekhar on 28-Apr-17.
 */
const  modifySwaggerJSON  = require('modifySwaggerJSON');
const apigeeAdminOptions = require("apigee-admin-options");
const clientMessages = require('locale-module');
const Promise = require('promise');
const request = require('request');
const logger = require('logger')
const fs = require('fs');
const isUrl = require('is-url')
const dbInstance = require('local-data-base');
const apiModel = require('publish-swagger-model/api-model');
const mailOperations = require("mail-operations");
class AdminOperations {
    //Need to initialize
}

//Get api model by model name
AdminOperations.prototype.getModel = function (model) {
    return new Promise(function (resolve, reject) {
        try {
            const opts = apigeeAdminOptions('/'+model.name, "GET");
            logger.info('trying to get the  api-model which are available in apigee edge')
            request(opts, function (error, response, body) {
                if (error){
                    logger.error(error)
                    reject({statusCode : 500, message : error.message});
                } else if (response && response.statusCode == 200 &&  body) {
                    logger.info('returned the api-model to caller')
                    resolve(body);
                    return
                }  else {
                    logger.error(body.message)
                    reject({statusCode : response.statusCode, message : response.body.message || body.message});
                }
                logger.error('failed to get the api-model from apigee edge')
            })
        } catch(error) {
            logger.error(error)
            logger.error('failed to get the  api-model from apigee edge')
            reject({statusCode : 500, message :"Internal Server error"});
        }

    });
}

//delete the api-model which deployed in  developer portal
 AdminOperations.prototype.delete = function (model) {
    return new Promise(function (resolve, reject) {
        try {
            const opts = apigeeAdminOptions('/'+model.name, "DELETE");
            logger.info('trying to delete the api-model from apigee edge sever : '+model.name)
            request(opts, function (error, response, body) {
                if (error){
                    logger.error( error.message)
                    reject({statusCode : 500, message : error.message});
                }else if (response && response.statusCode == 200 ) {
                    logger.info('successfully deleted api-model from apigee edge sever : ' + model.name )
                    resolve(response);
                    return;
                } else {
                    logger.error(response.body)
                    reject({statusCode : response.statusCode, message : response.body});
                }
                logger.error('could not delete the api-model from aige edge : '+model.name )
            });
        } catch (error) {
            logger.error('could not delete the api-model from aigee edge : '+model.name )
            logger.error(error);
            reject({statusCode : 500,  message : "Internal Server error"});
        }

    });
}

//Get list of api models which are available in developer portal
 AdminOperations.prototype.getModels = function () {
    return new Promise(function (resolve, reject) {
        try {
            const opts = apigeeAdminOptions('/', "GET");
            logger.info('trying to get the list of api-models which are available in apigee edge')
            request(opts, function (error, response, body) {
                if (error){
                    logger.error(error)
                    reject({statusCode : 500, message : error.message});
                } else if (response && response.statusCode == 200 ) {
                    logger.info('returned the list of api-model to caller')
                    resolve(response);
                    return
                }  else {
                    logger.error(body.message)
                    reject({statusCode : response.statusCode, message : response.body.message || body.message});
                }
                logger.error('failed to get the list of api-models from apigee edge')
            })
        } catch(error) {
            logger.error(error)
            logger.error('failed to get the list of api-models from apigee edge')
            reject({statusCode : 500, message :"Internal Server error"});
        }

    });
}

//tryign to remove the smart-docs  template from api-model
AdminOperations.prototype.removeTemplateFromAPIModel = function (model) {
    return new Promise(function (resolve, reject) {
        logger.info('trying to remove the smart-doc template from '+model.name)
        const opts = apigeeAdminOptions('/'+model.name+'/templates/devportal-drupal-cms?type=Method', "DELETE");
        request(opts, function (error, response, body) {
            if (error) {
                logger.error(error);
                reject({message :'faield to  remove template from api model : '+model.name, statusCode : 500})
            } else if ((response && response.statusCode == 200) ){
                logger.info('sucessfully removed template from api model : '+model.name)
                resolve({"message" : "sucessfully removed template from api model", statusCode : 200})
                return;
            } else {
                reject({"message" : "faield to  remove template from api model "+ modeName, statusCode : 500})
            }
            logger.error('faield to  remove template from api model : '+model.name)
        });
    })

    
}

//Add smartdoc template to  API model
AdminOperations.prototype.addTemplateToAPIModel = function (model) {
    return new Promise(function (resolve, reject) {
        const path = require('path');
        try {
            var filePath;
            //added two smart-docs template from in following directory , one template from sand-box  another template for  without sandbox
            if (model.isSandBoxAvailable == 'true') {
                filePath = path.join(__dirname, 'smartdoc-template-sandbox','devportal-drupal-cms-sandbox.hbr')
            } else {
                filePath = path.join(__dirname, 'smartdoc-template-no-sandbox','devportal-drupal-cms-no-sandbox.hbr')
            }
            var opts = apigeeAdminOptions('/'+model.name+'/templates?type=Method&name=devportal-drupal-cms', "POST");
            opts.headers  = {
                'transfer-encoding':'chunked'
            }
            //upload the smart-docs template to api-model
            opts.formData = {
                file: {
                    value:  fs.createReadStream(filePath),
                    options: {
                        filename: 'devportal-drupal-cms'
                    }
                }
            };
            logger.info('trying to smart-docs tempalte from  api-model : '+model.name)
            // Post the file to the upload server
            request(opts, function (error, response, body) {
                if (error) {
                    logger.error(error)
                    reject({message : error.message})
                } else if ((response.statusCode == 201 && response.statusMessage == 'Created') ){
                    logger.info('sucessfully added smart-docs template to api-model : '+model.name)
                    resolve({"message" : "sucessfully added template to api-model", statusCode : 201})
                    return;
                } else if (( response.statusCode == 409 && response.statusMessage == 'Conflict')){
                    logger.info("template already exists in api-model  "+ model.name)
                    resolve({"message" : "template already exists in api-model  "+ model.name, statusCode : 409})
                    return
                } else {
                    reject({"message" : "faield to  add the  template to api-model "+ model.name})
                }
                logger.error('faield to  add the  template to api-model '+ model.name)
            });
        } catch(error) {
            logger.error(error)
            logger.error('faield to  add the  template to api-model '+ model.name)
            reject({"message" : "Internal server error"});
            return;
        }
    })
}

//Create new api-model in developer portal
 AdminOperations.prototype.createModel = function (info, model) {
    const me = this;
    return new Promise(function (resolve, reject) {
        try {
            //extract the swagger json ,
            //get the title of swagger document
            //create the api-model , name of api-model will be the title of the swagger document
            var modelName = JSON.stringify(info);
            modelName = JSON.parse(modelName).title;
            //api-model should not contain the  sepcial charectors otehr than '-'
            modelName = modelName.replace(/[^a-zA-Z ]/g, "").trim().replace(/[ ]/g, '-');
            const createModelOpts = apigeeAdminOptions('/', "POST");
            createModelOpts.json = true
            createModelOpts.body = {
                "name" : modelName,
                "description" : info.description,
                "displayName" : info.title,
            }
            logger.info('trying to create the api-model with name : '+modelName)
            request(createModelOpts, function(error, response, body){
                if (error){
                    logger.error(error)
                    reject({statusCode : 500, message : error.message});
                } else if (response && response.statusCode == 201 && body ) {
                    model[apiModel.model_name] = modelName;
                    model[apiModel.model_id]  = body.id;
                    logger.info('api-model successfully created in apige edge '+ modelName)
                    resolve(model);
                    dbInstance.addAPIModel(model).then(function (data) {
                        logger.info('api-model '+ model.name+' successfully created in local-data-base')
                    }).catch(function (dberror) {
                        logger.error(dberror)
                        logger.error('faield to created api-model '+ model.name+' in local-data-base')
                    })
                    return;
                } else {
                    var message = undefined;
                    if (response && response.body && response.body.message && response.body.message.indexOf('already exists in the organization') != -1 ) {
                        message = clientMessages.getProperty('apimodel.deployed.update.unsuccessfully') + " " + info.title
                    } else if (body && body.message && body.message.indexOf('already exists in the organization') !== -1){
                        message = clientMessages.getProperty('apimodel.deployed.update.unsuccessfully')+ " " + info.title
                    } else {
                        message = response.body.message || body.message;
                    }
                    reject({statusCode : response.statusCode, 'errorMessageCode' : 'apiModelNameConflicts', message : message});
                    logger.error(message)
                }
                logger.error('failed to create the api-model with name '+modelName)
            });
            return ;
        } catch(error) {
            logger.error('failed to create the api-model')
            logger.error(error)
            reject({statusCode : 500, message : 'Internal server error'});
        }
    });
}

//import swagger document into you api-model.  swagger json has list of all end points
 AdminOperations.prototype.importSwagger = function (swaggerJSON, model, isRevisioning) {
    const me = this;
    return new Promise(function (resolve, reject) {
        try {
            //modify the swagger json based on api-model
            modifySwaggerJSON.modify(swaggerJSON, model);
            const apigeeOpts = apigeeAdminOptions('/'+model.name+"/import/file?format=swagger", "POST");
            apigeeOpts.body = JSON.stringify(swaggerJSON);
            apigeeOpts.headers  = {
                "Content-Type" : "application/json"
            }
            logger.info('trying to upload the swagger json to api-model : '+model.name)
            request(apigeeOpts, function (error, response, body) {
                try {
                    if (body){
                        body = JSON.parse(body);
                    }
                    if (error){
                        logger.error(error)
                        reject({statusCode : 500, message : error.message});
                    } else  if (response && response.statusCode == 201 ) {
                        var exeAddTempFlow = true;
                        addTemplate.call(me, model, resolve, reject, exeAddTempFlow)
                        resolve(response);
                        logger.info('successfully uploaded swagger josn to  api-model : '+model.name)
                        //send mail to publisher and reviewer
                        mailOperations.sendMail(model, body.revisionNumber);
                        return;
                    }  else {
                        logger.error(body.message);
                        reject({statusCode : response.statusCode, 'errorMessageCode' : "apiModelNotFound", message : body.message || response.body.message });
                        return;
                    }
                } catch (error) {
                    logger.error(error);
                    logger.error('failed to upload the swagger json to api-model : '+model.name);
                    reject({statusCode : 500, message : "Intrenal server error"});
                }
            })
        } catch(error) {
            logger.error(error);
            logger.error('failed to upload the swagger json to api-model : '+model.name);
            reject({statusCode : 500, message : "Intrenal server error"});
        }

    });
}

//get swagger json by swagger url
 AdminOperations .prototype.getSwaggerJSOn = function (model) {
    return new Promise(function (resolve, reject) {
        try {
            const swaggerOptions = apigeeAdminOptions(undefined, "GET", model.swaggerurl);
            logger.info('trying to get  the swagger json by swagger url : '+model.swaggerurl)
            request(swaggerOptions, function (error, response, body) {
                if (error){
                    logger.error(error);
                    reject({statusCode : 500, 'errorMessageCode' : 'invalidSwaggerURL', 'message' : clientMessages.getProperty('swagger.validSwaggerURL')});
                } else if (response && response.statusCode == 200 && body != undefined) {
                    try {
                        var jsonObject = JSON.parse(body);
                        if (parseFloat(jsonObject.swagger) >= 1) {
                            resolve(jsonObject);
                            logger.info('successfully got swagger json from swagger url : '+model.swaggerurl)
                        } else {
                            logger.error(clientMessages.getProperty('swagger.validSwaggerJSOn'))
                            reject({statusCode : 500, 'errorMessageCode' : 'invalidSwaggerJSON', 'message' : clientMessages.getProperty('swagger.validSwaggerJSOn')});
                        }
                    } catch (error) {
                        logger.error(clientMessages.getProperty('swagger.validSwaggerJSOn'))
                        reject({statusCode : 500, 'errorMessageCode' : 'invalidSwaggerJSON', 'message' : clientMessages.getProperty('swagger.validSwaggerJSOn')});
                    }
                    return;
                } else {
                    logger.error(clientMessages.getProperty('swagger.validSwaggerURL'))
                    reject({statusCode : 500, 'errorMessageCode' : 'invalidSwaggerURL', 'message' : clientMessages.getProperty('swagger.validSwaggerURL')});
                }
                logger.error('failed to get swagger json from  swagger url  : '+model.swaggerurl)
            })
        } catch(error) {
            logger.error('failed to get swagger json from  swagger url  : '+model.swaggerurl);
            logger.error(error);
            reject({statusCode : 500, message : "Intrenal server error"});
        }

    });
}

//check api proxy url is valid or not
 AdminOperations.prototype.isAPIProxyEndPointValidURLFormat = function (model) {
    return new Promise(function (resolve, reject) {
        try {
            logger.info('validating api-proxy url....  : '+model.proxyurl)
            var reg = /^(https|http):\/\/[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)*/i
            if (reg.test(model.proxyurl)) {
                resolve({'isAPIProxyEndPointURlValid' : true});
            } else {
            reject({statusCode : 500, 'isAPIProxyEndPointURlValid' : false, 'errorMessageCode' : 'invalidAPIProxyURl', 'message' : clientMessages.getProperty('apiproxy.validAPIProxyURL')});
        }
        } catch (error) {
            logger.error(clientMessages.getProperty('apiproxy.validAPIProxyURL')+" : " +model.proxyurl)
            logger.error(error)
            reject({statusCode : 500, 'isAPIProxyEndPointURlValid' : false, 'errorMessageCode' : 'invalidAPIProxyURl', 'message' : clientMessages.getProperty('apiproxy.validAPIProxyURL')});
        }
    });
}



function removeTemplate(model,resolve, reject, exeAddTempFlow) {
    const me = this;
    this.removeTemplateFromAPIModel(model).then(function (removeTemplateMsg) {
        if (removeTemplateMsg.statusCode == 200 && exeAddTempFlow) {
            exeAddTempFlow = false;
            addTemplate.call(me, model, resolve, reject, exeAddTempFlow)
        } else {
            reject({'message' : 'unable to remove  the template from api-model'});
        }
    }).catch(function (error) {
        reject({'message' : error.message})
    })
}

//trying  to delete the smart-docs template from api-model
function addTemplate(model, resolve, reject, exeAddTempFlow) {
    const me = this
    //adding  smart-docs template to api-model
    logger.info('trying to add the smart-docs template to api-model : '+model.name)
    this.addTemplateToAPIModel(model).then(function (addTemplateMsg) {
        if (addTemplateMsg.statusCode == 201) {
            logger.info('successfully uploaded smart docs template to api -model : '+model.name)
            resolve({name : model.name});
        } else if(addTemplateMsg.statusCode == 409) {
            //if smart-docs template already exists in api-model, so  first removing the template from api-model and the try to add new smart-docs template
            logger.info('smart-docs template already exists in api-model, so  first removing the template from api-model and the try to add new smart-docs template')
            removeTemplate.call(me, model, resolve, reject, exeAddTempFlow);
        } else {
            logger.error('failed to upload the  smart-docs template to api-model: '+model.name)
            reject({'message' : 'unable to add template to api-model'});
        }
    }).catch(function (error) {
        logger.error('failed to upload the  smart-docs template to api-model: '+model.name)
        logger.error(error);
        reject({'message' : error.message})
    })
}


module.exports = new  AdminOperations ();