/**
 * Created by rajasekhar on 07-Jun-17.
 */
const express = require('express');
const runConfig = require('run-config')
const logger = require('logger')
const request = require('request');
const clientMessages = require('locale-module');
const router = express.Router();
const path = require('path');
const dbInstance = require('local-data-base');
const validateSwaggerJson = require('validate-swagger-json')
const apigeeAdminOptions = require("apigee-admin-options");
const formatSwaggerJSON = require('modifySwaggerJSON');
const adminOperations  = require('admin-operations');
const apiModel = require('publish-swagger-model/api-model');
const publishRecordColumns =  require('publish-record-columns');
//return the list of main menus which are created in developer portal
router.get('/products',function (req, res) {
    try {
        logger.debug('Getting list of Products.....');
        res.status(200);
        res.send(runConfig.products);
        res.end();
    } catch (error) {
        logger.error('not able to return Menus')
        logger.error(error)
        res.status(500);
        res.send({message : "Intrernal server error"});
        res.end();
    }

})

//return list api-models which are created in apigee
router.get('/apimodels', function (req, res) {
    logger.debug('Geting list of api models....')
     adminOperations.getModels().then(function (data) {
        logger.debug('got the list of api-models')
        logger.info('Sent list of api models to client')
        res.status(200);
        res.send(data.body);
        res.end();
    }).catch(function (error) {
        logger.error(error)
        logger.error('faield to retrun teh list of api-model')
        res.status(500);
        res.send({message : "Intrernal server error"});
        res.end();
    })
});

//retun api-model by model id
router.get('/apimodel', function (req, res) {
    var object = searchQueryParam(req, [apiModel.model_id, apiModel.model_name, apiModel.latest_revision_number] )
    if (object.paramFound == false) {
        logger.error(object.message);
        res.status(403).send({"message" : object.message});
        res.end()
    }
    //get both apigee  api-models and local-data-base apimodels
    Promise.all([dbInstance.getRevisionBymodelID(object)]).then(function (data) {
        var modelRevision = data[0];
        if (modelRevision == undefined) {
            logger.error("unabe to find the model  "+ modelID)
            res.status(200).send({"message " : "unabe to find the api-model  ID : "+ object[apiModel.model_id]+ '  model name : '+object[apiModel.model_name]});
            res.end()
            return
        }
        logger.debug('Successfully sent  revision of api-model to client model ID : '+ object[apiModel.model_id]+ '  model name : '+object[apiModel.model_name])
        logger.info('Successfully sent api-model to client');
        delete modelRevision[0][publishRecordColumns.swagger_model]
        res.status(200).send(modelRevision[0]);
        res.end()
        return
    }).catch(function (error) {
        logger.error('not able to find the api-model model ID : '+ object[apiModel.model_id]+ '  model name : '+object[apiModel.model_name])
        logger.error(error);
        res.status(500);
        res.send({message : "Intrernal server error"});
    })
});

//retrun  swagger document
router.get('/swaggerjson', function (request, response) {
    var object = searchQueryParam(request, 'swaggerURL')
    if (object.paramFound == false) {
        logger.error(object.message);
        response.status(403).send({"message" : object.message});
        response.end()
    }
    var swaggerURL = object.paramValue;
     adminOperations.getSwaggerJSOn({"swaggerURL" : swaggerURL}).then(function (object) {
        logger.debug("swagger document is "+object);
        logger.debug("swagger document sent to client");
        response.status(200).send(object);
        response.end();
        return
    }).catch(function (error) {
        //need to send proper error message
        logger.error('Not able to get the swagger document');
        logger.error(error);
        response.status(500).send("Intrernal server error");
        response.end();
        return
    });
});

//add new api-model
router.post('/model/addModel', function (req, response) {
    var model = apiModel.convertReqToApiModel(req);
    if (model.hasOwnProperty('isValid') && !model.isValid){
        logger.error(model.message);
        response.status(500).send(model.message);
        response.end();
        return
    }
    //need to validate both proxy-API or API-endpoint URLs
    Promise.all([adminOperations.getSwaggerJSOn(model), adminOperations.isAPIProxyEndPointValidURLFormat(model)]).then(function (resolvedObject) {
        logger.debug('Swgger url  successfully validated'+model.swaggerURL);
        logger.debug('API-proxy or API-endpoint  successfully validated'+model.proxyurl);
        swaggerJson = resolvedObject[0];
        var msg = validateSwaggerJson.hasValidInfo(swaggerJson.info);
        if (msg != true) {
            logger.error(msg)
            response.status(500).send({message: msg , errorMessageCode : 'invalidSwaggerJSON'});
            response.end();
            return
        }
        //trying to create api-model in apigee edge
         adminOperations.createModel(swaggerJson.info, model).then(function (createdModel) {
             model = createdModel;
            //trying to import swagger-api to api-model
             setAuhorMail(req, model);
             adminOperations.importSwagger(swaggerJson,  model, false ).then(function (resolveImpSwagObj) {
                var object = resolveImpSwagObj.body;
                object = JSON.parse(object);
                object['message']  = clientMessages.getProperty('apimodel.deployed.successfully');
                response.status(201).send(JSON.stringify(object));
                response.end();
                logger.info('Successfully added swagger api to  model '+model.name)
                //after creating api-model in apige-edge , smae model should be available in local-docbase
                 logger.info('trying to create teh api-model in local-data-base : '+model.name)
                let publishedRecord = getPublishedRecord(model, swaggerJson, object)
                setAuhorMail(req, publishedRecord);
                dbInstance.addAPIRevision(publishedRecord).then(function (data) {
                    logger.info('added '+ publishedRecord.revisionNumber +' revision of  '+ publishedRecord.name+' successfully created in local-data-base')
                }).catch(function (dberror) {
                    logger.error(dberror)
                    logger.error('faield to create  '+ publishedRecord.revisionNumber +'  revision of  '+ model.name+' in local-data-base')
                })
                return;
            }).catch(function (error) {
                //if failed to add the  swagger document  to api-mdel , same api-model should  revert from apigee
                deleteAPIModel(model)
                logger.error('faield to created api-model '+ model.name+' in apigee edge')
                logger.error(error)
                response.status(error.statusCode || 500).send((error instanceof Error)? {message : 'Internal server error'} : error);
                response.end();
                return
            })
        }).catch(function (error) {
             logger.error('faield to created api-model '+ model.name+' in apigee edge')
             logger.error(error)
             response.status(error.statusCode || 500).send((error instanceof Error)? {message : "Intrernal server error"} : error);
             response.end();
        })
    }).catch(function (error) {
        logger.error('faield to created api-model '+ model.name+' in apigee edge')
        logger.error(error)
        response.status(error.statusCode || 500).send((error instanceof Error)? {message : "Intrernal server error"} : error);
        response.end();
        return;
    })
    return;
});

//update api-model
router.put('/model/updateModel', function (request, response) {
    var model = apiModel.convertReqToApiModel(request);
    if (model.hasOwnProperty('isValid') && !model.isValid){
        logger.error(model.message);
        response.status(500).send(model.message);
        response.end();
        return
    }
    //need to validate both proxy-API or API-endpoint URLs
    Promise.all([ adminOperations.getSwaggerJSOn(model),  adminOperations.isAPIProxyEndPointValidURLFormat(model)]).then(function (resolvedObject) {
        swaggerJson = resolvedObject[0];
        logger.debug('Swgger url  successfully validated'+model.swaggerURL);
        logger.debug('API-proxy or API-endpoint  successfully validated'+model.proxyurl);
        setAuhorMail(request, model);
         adminOperations.importSwagger(swaggerJson, model, true).then(function (resolveImpSwagObj) {
            var object = resolveImpSwagObj.body;
            object = JSON.parse(object);
            object['message']  = clientMessages.getProperty('apimodel.deployed.update.successfully');
            response.status(201).send(object);
            response.end();
            logger.info(clientMessages.getProperty('apimodel.deployed.update.successfully'))
             //after updating api-model in apige-edge , smae model should be available in local-docbase
            let publishedRecord = getPublishedRecord(model, swaggerJson, object)
            //set record author
            setAuhorMail(request, publishedRecord);
            dbInstance.addAPIRevision(publishedRecord).then(function (data) {
                logger.info('added '+ publishedRecord.revisionNumber +' revision of  '+ publishedRecord.name+' successfully created in local-data-base')
            }).catch(function (dberror) {
                logger.error(dberror)
                logger.error('faield to create  '+ publishedRecord.revisionNumber +'  revision of  '+ model.name+' in local-data-base')
            })
        }).catch(function (error) {
            logger.error(error)
             logger.error('api-model was not updated  in apigee edge  ' +model.name)
            response.status(500).send((error instanceof Error)? {message : "Intrernal server error"} : error);
            response.end();
        })
    }).catch(function (error) {
        logger.error(error)
        logger.error('api-model was not updated  in apigee edge ' +model.name )
        response.status(500).send((error instanceof Error)? {message : "Intrernal server error"} : error);
        response.end();
        return;
    })
    return;
});

//get properties 
router.get('/properties', function (req, response) {
    var properties = clientMessages.getAllProperties();
    logger.debug('Geting properties....')
    adminOperations.getModels().then(function (data) {
        logger.debug('got the list of properties')
        logger.info('Sent list of properties to client')
        response.status(200);
        response.send(properties);
        response.end();
    }).catch(function (error) {
        logger.error(error)
        logger.error('faield to retrun teh list of properties')
        response.status(500);
        response.send({message : "Intrernal server error"});
        res.end();
    })
})

//retruns the  querParam value by queryParam name
function searchQueryParam(req, params) {
    let config = {};
    for (var index in params){
        logger.debug('Searching for query param value of  '+params[index])
        var paramValue = req.query[params[index]];
        var isQueryParamAvi = req.query.hasOwnProperty(params[index])
        if ((paramValue == undefined || paramValue == null) && (!isQueryParamAvi)) {
            var message = undefined;
            if (!isQueryParamAvi) {
                message = "this API will supoort only query param- name :" +params[index];
            } else {
                message = paramName + "  query param value may be either undefined or blank"
            }
            logger.error(message)
            return {
                paramFound : false,
                message : message
            }
        } else {
            logger.debug('value of query param '+params[index]+'  is '+paramValue)
            config[params[index]] = paramValue;
        }
    }
    return config;
}


//delete api-model
function deleteAPIModel(model) {
    logger.debug("trying to delete the model : "+model.name)
    adminOperations.delete(model).then(function (deletedModel) {
        logger.debug("successfully deleted api-model : "+model.name)
    }).catch(function (delteError) {
        logger.error(delteError)
        logger.error("not able to delete the api-model"+model.name)
    })
}


function getPublishedRecord(model, swaggerJson, revisionInfo) {
        let object = {};
        object[publishRecordColumns.model_name] = model.name;
        object[publishRecordColumns.model_id] = model.model_id
        object[publishRecordColumns.revision_id] = revisionInfo.id,
        object[publishRecordColumns.revision_number] = revisionInfo.revisionNumber,
        object[publishRecordColumns.creation_time] = Date.now(),
        object[publishRecordColumns.author] = model.author,
        object[publishRecordColumns.reviewer] = model.reviewer,
        object[publishRecordColumns.product] =  model.product,
        object[publishRecordColumns.platform] = model.platform,
        object[publishRecordColumns.swagger_model] = JSON.stringify(swaggerJson),
        object[publishRecordColumns.proxyurl] =  model.proxyurl,
        object[publishRecordColumns.isSandBoxAvailable] = model.isSandBoxAvailable,
        object[publishRecordColumns.swagger_url] =  model.swaggerurl;
        return object;
}

function setAuhorMail(req, object) {
    if (req && req.session && req.session.data && req.session.data.mail[0]){
        let mail = req.session.data.mail[0];
        logger.info('author of model : '+ object.name+'  is '+mail)
        object[publishRecordColumns.author] = mail;
    } else {
        logger.info('not able to find the author of model : '+ object.name);
    }

}


module.exports = router;